name: Python package

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.11"]

    outputs:
      package_name: ${{ steps.get_package_info.outputs.package_name }}
      package_version: ${{ steps.get_package_info.outputs.package_version }}

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install mypy pytest pytest-asyncio build types-PyYAML # Added 'build' and 'types-PyYAML'
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Type check with mypy
      run: |
        mypy .
    - name: Test with pytest
      run: |
        pytest
    - name: Get package info
      id: get_package_info
      run: |
        PACKAGE_NAME=$(grep 'name =' pyproject.toml | cut -d '"' -f 2)
        PACKAGE_VERSION=$(grep 'version =' pyproject.toml | cut -d '"' -f 2)
        echo "package_name=$PACKAGE_NAME" >> $GITHUB_OUTPUT
        echo "package_version=$PACKAGE_VERSION" >> $GITHUB_OUTPUT
      shell: bash
    - name: Build distribution packages
      run: |
        python -m build
    - name: Upload distribution packages
      uses: actions/upload-artifact@v4 # Updated to v4
      with:
        name: python-packages
        path: dist/
  pypi-publish:
    name: Upload release to PyPI
    needs: build # This job depends on the 'build' job
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' # Publish on all pushes to main
    environment:
      name: pypi
      url: https://pypi.org/p/mcp-devtools # Updated project name
    permissions:
      id-token: write  # IMPORTANT: this permission is mandatory for trusted publishing
    steps:
    - name: Download all distribution packages
      uses: actions/download-artifact@v4 # Updated to v4
      with:
        name: python-packages
        path: dist/
    - name: Check if version already exists on PyPI
      id: check_version
      run: |
        PACKAGE_NAME="${{ needs.build.outputs.package_name }}"
        PACKAGE_VERSION="${{ needs.build.outputs.package_version }}"
        echo "Checking if $PACKAGE_NAME version $PACKAGE_VERSION exists on PyPI..."

        # Query PyPI API
        RESPONSE=$(curl -s "https://pypi.org/pypi/$PACKAGE_NAME/json")

        # Check if the version exists in the releases
        if echo "$RESPONSE" | jq -e ".releases.\"$PACKAGE_VERSION\"" > /dev/null; then
          echo "Version $PACKAGE_VERSION already exists on PyPI. Skipping publish."
          echo "should_publish=false" >> $GITHUB_OUTPUT
        else
          echo "Version $PACKAGE_VERSION does not exist on PyPI. Proceeding with publish."
          echo "should_publish=true" >> $GITHUB_OUTPUT
        fi
      shell: bash
    - name: Publish package distributions to PyPI
      if: steps.check_version.outputs.should_publish == 'true'
      uses: pypa/gh-action-pypi-publish@release/v1
